{"version":3,"sources":["formatters.js","Stock.js"],"names":["bigNumberFormatter","window","Intl","NumberFormat","undefined","maximumFractionDigits","POWER_SUFFIXES","abbreviatedNumberFormatter","format","num","fixed","b","toPrecision","split","k","length","Math","floor","min","parseInt","slice","c","abs","toFixed","pow","currencyFormatter","minimumFractionDigits","numberFormatter","percentFormatter","style","wholeNumberFormatter","SummaryListItem","title","value","className","x","d","Date","date","y","close","margin","xMax","yMax","Stock","xScale","yScale","match","dispatch","useDispatch","chart","useSelector","state","charts","params","symbol","quote","quotes","React","fetchSymbolData","deviationYFudge","deviation","scaleTime","range","domain","extent","scaleLinear","max","companyName","latestPrice","cx","change","changePercent","md","latestVolume","avgTotalVolume","previousClose","week52Low","week52High","marketCap","peRatio","offset","size","backgroundColor","borderRadius","color","height","lineHeight","width","fill","rx","id","stopColor","stopOpacity","top","left","data","stroke","scale","tickLabelProps","val","i","dx","dy","textAnchor","fontFamily","fontSize","tickStroke","tickTextFill"],"mappings":"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","file":"static/js/8.9a60c3e3.chunk.js","sourcesContent":["/* @flow */\r\n\r\nconst bigNumberFormatter = new window.Intl.NumberFormat(undefined, { maximumFractionDigits: 2 });\r\nconst POWER_SUFFIXES = [\"\", \"K\", \"M\", \"B\", \"T\"];\r\nexport const abbreviatedNumberFormatter = {\r\n  format(num: number, fixed?: number): string {\r\n    if (num === null || num === 0) return \"0\"; // terminate early\r\n\r\n    fixed = !fixed || fixed < 0 ? 0 : fixed; // number of decimal places to show\r\n    const b = num.toPrecision(2).split(\"e\"); // get power\r\n    const k = b.length === 1 ? 0 : Math.floor(Math.min(parseInt(b[1].slice(1), 10), 14) / 3); // floor at decimals, ceiling at trillions\r\n    const d = k < 0 ? k : Math.abs(k); // enforce -0 is 0\r\n    const c = d < 1 ? num.toFixed(0 + fixed) : (num / Math.pow(10, k * 3)).toFixed(1 + fixed); // divide by power\r\n    return `${bigNumberFormatter.format(c)}${POWER_SUFFIXES[k]}`; // append power\r\n  },\r\n};\r\n\r\n// Don't use style `currency` because it always prints a currency symbol. Match Google Finance\r\n// exactly (until supporting other currencies) and don't print the symbol.\r\nexport const currencyFormatter: Intl$NumberFormat = new window.Intl.NumberFormat(undefined, {\r\n  maximumFractionDigits: 2,\r\n  minimumFractionDigits: 2,\r\n});\r\n\r\nexport const numberFormatter: Intl$NumberFormat = new window.Intl.NumberFormat(undefined, {\r\n  maximumFractionDigits: 3,\r\n  minimumFractionDigits: 3,\r\n});\r\n\r\nexport const percentFormatter: Intl$NumberFormat = new window.Intl.NumberFormat(undefined, {\r\n  maximumFractionDigits: 2,\r\n  minimumFractionDigits: 2,\r\n  style: \"percent\",\r\n});\r\n","/* @flow */\r\n\r\nimport * as React from \"react\";\r\nimport { AxisLeft, AxisBottom } from \"@vx/axis\";\r\nimport { Col, Container, Row } from \"reactstrap\";\r\nimport {\r\n  abbreviatedNumberFormatter,\r\n  currencyFormatter,\r\n  numberFormatter,\r\n  percentFormatter,\r\n} from \"./formatters\";\r\nimport { deviation, extent, max, min } from \"d3-array\";\r\nimport { scaleTime, scaleLinear } from \"@vx/scale\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { AreaClosed } from \"@vx/shape\";\r\nimport type { Dispatch } from \"./types\";\r\nimport { Group } from \"@vx/group\";\r\nimport { LinearGradient } from \"@vx/gradient\";\r\nimport cx from \"classnames\";\r\nimport { fetchSymbolData } from \"./actions\";\r\n\r\ntype Props = {\r\n  match: Object,\r\n};\r\n\r\nconst wholeNumberFormatter = new window.Intl.NumberFormat(undefined);\r\n\r\nfunction SummaryListItem({ title, value }: { title: string, value: string }) {\r\n  return (\r\n    <li className=\"d-flex justify-content-between border-bottom py-2\">\r\n      <span>{title}</span>\r\n      <strong>{value}</strong>\r\n    </li>\r\n  );\r\n}\r\n\r\nconst width = 635;\r\nconst height = 400;\r\nconst x = (d) => new Date(d.date);\r\nconst y = (d) => d.close;\r\n\r\n// Bounds\r\nconst margin = {\r\n  top: 20,\r\n  bottom: 40,\r\n  left: 50,\r\n  right: 0,\r\n};\r\nconst xMax = width - margin.left - margin.right;\r\nconst yMax = height - margin.top - margin.bottom;\r\n\r\nexport default function Stock({ match }: Props): React.Node {\r\n  const dispatch = useDispatch<Dispatch>();\r\n  const chart = useSelector((state) => state.charts[match.params.symbol]);\r\n  const quote = useSelector((state) => state.quotes[match.params.symbol]);\r\n\r\n  React.useEffect(() => {\r\n    dispatch(fetchSymbolData(match.params.symbol));\r\n  }, [dispatch, match.params.symbol]);\r\n\r\n  let xScale;\r\n  let yScale;\r\n  if (chart != null) {\r\n    const deviationYFudge = deviation(chart, y) / 2;\r\n    xScale = scaleTime({\r\n      range: [0, xMax],\r\n      domain: extent(chart, x),\r\n    });\r\n    yScale = scaleLinear({\r\n      range: [yMax, 0],\r\n      domain: [min(chart, y) - deviationYFudge, max(chart, y) + deviationYFudge],\r\n    });\r\n  }\r\n  return (\r\n    <Container className=\"mb-3 mt-3\">\r\n      <h2>\r\n        {quote == null ? \"...\" : quote.companyName} ({match.params.symbol})\r\n      </h2>\r\n      <h3>\r\n        <small>{quote == null ? \"...\" : quote.latestPrice}</small>{\" \"}\r\n        <span\r\n          className={cx({\r\n            \"text-danger\": quote != null && quote.change < 0,\r\n            \"text-success\": quote != null && quote.change >= 0,\r\n          })}\r\n        >\r\n          {quote == null\r\n            ? \"...\"\r\n            : `${quote.change >= 0 ? \"+\" : \"\"}${currencyFormatter.format(quote.change)} (${\r\n                quote.changePercent >= 0 ? \"+\" : \"\"\r\n              }${percentFormatter.format(quote.changePercent)})`}\r\n        </span>\r\n      </h3>\r\n      <Row className=\"mt-4\">\r\n        <Col className=\"border-top border-top-lg pt-2\" md=\"4\">\r\n          <h4 className=\"mb-3\">Summary</h4>\r\n          <ul className=\"list-unstyled\">\r\n            <SummaryListItem\r\n              title=\"Volume\"\r\n              value={quote == null ? \"...\" : wholeNumberFormatter.format(quote.latestVolume)}\r\n            />\r\n            <SummaryListItem\r\n              title=\"Avg Daily Volume\"\r\n              value={quote == null ? \"...\" : wholeNumberFormatter.format(quote.avgTotalVolume)}\r\n            />\r\n            <SummaryListItem\r\n              title=\"Previous Close\"\r\n              value={quote == null ? \"...\" : currencyFormatter.format(quote.previousClose)}\r\n            />\r\n            <SummaryListItem\r\n              title=\"52-week Range\"\r\n              value={\r\n                quote == null\r\n                  ? \"...\"\r\n                  : `${currencyFormatter.format(quote.week52Low)}–${currencyFormatter.format(\r\n                      quote.week52High\r\n                    )}`\r\n              }\r\n            />\r\n            <SummaryListItem\r\n              title=\"Mkt. Cap\"\r\n              value={quote == null ? \"...\" : abbreviatedNumberFormatter.format(quote.marketCap)}\r\n            />\r\n            <SummaryListItem\r\n              title=\"P/E Ratio\"\r\n              value={\r\n                quote == null || quote.peRatio == null\r\n                  ? \"...\"\r\n                  : numberFormatter.format(quote.peRatio)\r\n              }\r\n            />\r\n          </ul>\r\n        </Col>\r\n        <Col className=\"border-top border-top-lg pt-2\" md={{ offset: 1, size: 7 }}>\r\n          <h4 className=\"mb-3\">History</h4>\r\n          {chart == null ? (\r\n            <div\r\n              className=\"text-center\"\r\n              style={{\r\n                backgroundColor: \"#343a40\",\r\n                borderRadius: \"0.25rem\",\r\n                color: \"#fff\",\r\n                height: `${height}px`,\r\n                lineHeight: `${height}px`,\r\n              }}\r\n            >\r\n              Loading...\r\n            </div>\r\n          ) : (\r\n            <svg width={width} height={height}>\r\n              <rect x={0} y={0} width={width} height={height} fill=\"#343a40\" rx={\"0.25rem\"} />\r\n              <LinearGradient id=\"gradient\">\r\n                <stop offset=\"0%\" stopColor=\"#ffc107\" stopOpacity={1} />\r\n                <stop offset=\"100%\" stopColor=\"#ffc107\" stopOpacity={0.2} />\r\n              </LinearGradient>\r\n              <Group top={margin.top} left={margin.left}>\r\n                <AreaClosed\r\n                  data={chart}\r\n                  xScale={xScale}\r\n                  yScale={yScale}\r\n                  x={x}\r\n                  y={y}\r\n                  fill={\"url(#gradient)\"}\r\n                  stroke={\"\"}\r\n                />\r\n                <AxisLeft\r\n                  left={0}\r\n                  scale={yScale}\r\n                  stroke={\"rgba(255,255,255,0.3)\"}\r\n                  top={0}\r\n                  tickLabelProps={(val, i) => ({\r\n                    dx: \"-0.25em\",\r\n                    dy: \"0.25em\",\r\n                    textAnchor: \"end\",\r\n                    fontFamily: \"Arial\",\r\n                    fontSize: 10,\r\n                    fill: \"rgba(255,255,255,0.9)\",\r\n                  })}\r\n                  tickStroke={\"rgba(255,255,255,0.3)\"}\r\n                  tickTextFill={\"rgba(255,255,255,0.3)\"}\r\n                />\r\n                <AxisBottom\r\n                  scale={xScale}\r\n                  stroke={\"rgba(255,255,255,0.3)\"}\r\n                  top={yMax}\r\n                  tickLabelProps={(val, i) => ({\r\n                    dy: \"0.25em\",\r\n                    textAnchor: \"middle\",\r\n                    fontFamily: \"Arial\",\r\n                    fontSize: 10,\r\n                    fill: \"rgba(255,255,255,0.9)\",\r\n                  })}\r\n                  tickStroke={\"rgba(255,255,255,0.3)\"}\r\n                  tickTextFill={\"rgba(255,255,255,0.3)\"}\r\n                />\r\n              </Group>\r\n            </svg>\r\n          )}\r\n        </Col>\r\n      </Row>\r\n    </Container>\r\n  );\r\n}\r\n"],"sourceRoot":""}