{"version":3,"sources":["SpinKit.js","Navbar.js","App.js","registerServiceWorker.js","index.js","reducers.js","actions.js","transformers.js"],"names":["SpinKit","props","className","cx","title","updatedAtFormatter","window","Intl","DateTimeFormat","undefined","day","hour","hour12","minute","month","second","year","findFirstNSymbols","n","collection","search","uppercaseSearch","toUpperCase","results","some","iexSymbol","symbol","startsWith","push","length","noop","Suggestion","suggestion","query","highlightedSlice","slice","normalSlice","name","SuggestionValue","Navbar","handleSearchBlur","setState","searchIsFocused","handleSearchFocus","allIexSymbols","dispatch","fetchAllIexSymbols","handleSearchQueryChange","event","currentTarget","nodeName","setSearchQuery","value","handleSearchQueryClear","handleSearchSubmit","preventDefault","handleSetIexApiKey","setIexApiKey","state","nextIexApiKey","closeActiveModal","handleSuggestionSelected","suggestionValue","history","activeModal","openSettingsModal","type","iexApiKey","setNextIexApiKey","target","toggle","isOpen","searchQuery","searchResults","nextSearchQuery","this","fetchErrorMessage","updatedAt","color","dark","expand","tag","NavLink","to","onClick","navbar","action","inline","onSubmit","getSuggestionValue","highlightFirstSuggestion","inputProps","onBlur","onChange","onFocus","placeholder","onSuggestionsClearRequested","onSuggestionsFetchRequested","onSuggestionSelected","renderSuggestion","suggestions","theme","container","input","suggestionsContainer","suggestionsList","suggestionHighlighted","isLoading","aria-label","role","dateTime","Date","toISOString","format","size","htmlFor","id","required","outline","React","withRouter","connect","isFetchingCount","Overview","Performance","Stock","Transactions","LoadingIndicator","App","useDispatch","fetchAllQuotes","component","fallback","exact","path","href","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","rootElement","document","getElementById","Error","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","nextSymbols","symbols","indexOf","transaction","nextTransactionId","transactions","Set","newTransactions","map","add","newTransaction","Array","from","concat","appSettings","pageSize","filter","documentBody","body","csvData","csvStringify","transformStocksToGf","quotes","columns","header","blob","Blob","a","createElement","url","URL","createObjectURL","download","style","display","appendChild","click","revokeObjectURL","isFetchingAllIexSymbols","charts","symbolData","chart","quote","message","now","applyMiddleware","thunk","persistState","key","ReactDOM","render","process","origin","addEventListener","fetch","response","status","headers","get","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker","fetchAllQuotesTimeout","IEX_ROOT","addTransaction","changePageSize","nextPageSize","deletePortfolio","deleteSymbols","deleteTransactions","downloadPortfolio","clearFetchQuotesTimeout","clearTimeout","fetchSymbolData","getState","json","setFetchQuotesTimeout","setTimeout","alert","join","data","forEach","finally","importTransactionsFile","file","fileReader","FileReader","onerror","onload","parsedCsv","csvParse","result","transformGfToStocks","readAsText","gfTransactions","cashValue","parseFloat","commission","Commission","date","notes","Notes","price","Price","shares","Shares","Symbol","Type","stocksTransactions","Name","companyName"],"mappings":"0QAYe,SAASA,EAAQC,GAC9B,OACE,uBAAKC,UAAWC,IAAG,0BAA2BF,EAAMC,YAClD,uBAAKA,UAAU,kBAAkBE,MAAOH,EAAMG,OAC5C,uBAAKF,UAAU,qBACf,uBAAKA,UAAU,qBACf,uBAAKA,UAAU,qBACf,uBAAKA,UAAU,uB,YC6BjBG,EAAqB,IAAIC,OAAOC,KAAKC,oBAAeC,EAAW,CACnEC,IAAK,UACLC,KAAM,UACNC,QAAQ,EACRC,OAAQ,UACRC,MAAO,UACPC,OAAQ,UACRC,KAAM,YAGR,SAASC,EAAkBC,EAAWC,EAA8BC,GAElE,IAAMC,EAAkBD,EAAOE,cACzBC,EAA4B,GAQlC,OAPAJ,EAAWK,MAAK,SAACC,GACf,SAAIA,EAAUC,OAAOC,WAAWN,KAC9BE,EAAQK,KAAKH,GACTF,EAAQM,SAAWX,OAIpBK,EAGT,SAASO,KAET,SAASC,EAAWC,EAApB,GAA0E,IAA7BC,EAA4B,EAA5BA,MAGrCC,EAAmBF,EAAWN,OAAOS,MAAM,EAAGF,EAAMJ,QACpDO,EAAcJ,EAAWN,OAAOS,MAAMF,EAAMJ,QAClD,OACE,4BACE,8BAASK,GACT,4BAAOE,GAFT,MAEgCJ,EAAWK,MAK/C,SAASC,EAAgBN,GACvB,OAAOA,EAAWN,O,IAGda,E,kDACJ,WAAYtC,GAAe,IAAD,8BACxB,cAAMA,IAWRuC,iBAAmB,WACjB,EAAKC,SAAS,CAAEC,iBAAiB,KAbT,EAgB1BC,kBAAoB,WACc,MAA5B,EAAK1C,MAAM2C,eACb,EAAK3C,MAAM4C,SAASC,eAEtB,EAAKL,SAAS,CAAEC,iBAAiB,KApBT,EAuB1BK,wBAA0B,SAACC,GACY,UAAjCA,EAAMC,cAAcC,UACxB,EAAKC,eAAeH,EAAMC,cAAcG,QAzBhB,EA4B1BC,uBAAyB,WACvB,EAAKF,eAAe,KA7BI,EAgC1BG,mBAAqB,SAACN,GACpBA,EAAMO,kBAjCkB,EAoC1BC,mBAAqB,SAACR,GACpBA,EAAMO,iBACN,EAAKtD,MAAM4C,SAASY,YAAa,EAAKC,MAAMC,gBAC5C,EAAKC,oBAvCmB,EA0C1BC,yBAA2B,SAACb,EAAD,GAAqE,IAApDc,EAAmD,EAAnDA,gBAC1C,EAAK7D,MAAM8D,QAAQnC,KAAnB,kBAAmCkC,KA3CX,EAwD1BF,iBAAmB,WACjB,EAAKnB,SAAS,CAAEuB,YAAa,QAzDL,EA4D1BC,kBAAoB,WAClB,EAAKxB,SAAS,CACZuB,YAAa,CAAEE,KAAM,YACrBP,cAAuC,MAAxB,EAAK1D,MAAMkE,UAAoB,GAAK,EAAKlE,MAAMkE,aA/DxC,EAmE1BC,iBAAmB,SAACpB,GAClB,EAAKP,SAAS,CAAEkB,cAAeX,EAAMqB,OAAOjB,SApEpB,EAuE1BkB,OAAS,WACP,EAAK7B,SAAS,CAAE8B,QAAS,EAAKb,MAAMa,UAtEpC,EAAKb,MAAQ,CACXM,YAAa,KACbO,QAAQ,EACRZ,cAAe,GACfjB,iBAAiB,EACjB8B,YAAa,GACbC,cAAe,IARO,E,2DA8CXC,GACbC,KAAKlC,SAAS,CACZ+B,YAAaE,EACbD,cAC8B,MAA5BE,KAAK1E,MAAM2C,cACP,GACA3B,EAAkB,EAAG0D,KAAK1E,MAAM2C,cAAe8B,O,+BAuBhD,MAEkCC,KAAK1E,MAAtC2E,EAFD,EAECA,kBAAmBC,EAFpB,EAEoBA,UAC3B,OACE,gBAAC,IAAD,CAAkBC,MAAM,OAAOC,MAAI,EAACC,OAAO,MACzC,gBAAC,IAAD,CAAa9E,UAAU,eAAe+E,IAAKC,IAASC,GAAG,KAAvD,YAGA,gBAAC,IAAD,CAAeC,QAAST,KAAKL,SAC7B,gBAAC,IAAD,CAAUC,OAAQI,KAAKjB,MAAMa,OAAQc,QAAM,GACzC,gBAAC,IAAD,CACEC,OAAO,kBACPpF,UAAU,UACVqF,QAAM,EACNC,SAAUb,KAAKrB,oBAEf,gBAAC,IAAD,CACEmC,mBAAoBnD,EACpBoD,0BAAwB,EACxBC,WAAY,CACVtD,KAAM,SACNuD,OAAQjB,KAAKnC,iBACbqD,SAAUlB,KAAK5B,wBACf+C,QAASnB,KAAKhC,kBACdoD,YAAa,YACb3C,MAAOuB,KAAKjB,MAAMc,aAEpBwB,4BAA6BrB,KAAKtB,uBAClC4C,4BAA6BnE,EAC7BoE,qBAAsBvB,KAAKd,yBAC3BsC,iBAAkBpE,EAClBqE,YAAazB,KAAKjB,MAAMe,cACxB4B,MAAO,CACLC,UAAW,cACXC,MAAOpG,IAAG,+BAAgC,CACxC,WAAYwE,KAAKjB,MAAMhB,kBAEzB8D,qBAAsB,WACtBC,gBAAgB,iBAAD,OACb9B,KAAKjB,MAAMe,cAAc5C,OAAS,EAAI,OAAS,IAEjDG,WAAY,gBACZ0E,sBAAuB,aAI5B/B,KAAK1E,MAAM0G,UACV,gBAAC,EAAD,CAASvG,MAAM,yBAAyB8D,KAAK,iBAC3C,KACkB,MAArBU,EAA4B,KAC3B,wBAAM1E,UAAU,OAAOE,MAAK,iBAAYwE,IACtC,wBAAMgC,aAAW,mBAAmB1G,UAAU,cAAc2G,KAAK,OAAjE,iBAKJ,6BACE,wBAAM3G,UAAU,iBAAhB,yBACc,MAAb2E,EACC,wBAAM3E,UAAU,cAAhB,SAEA,wBAAMA,UAAU,aAAa4G,SAAU,IAAIC,KAAKlC,GAAWmC,eACxD3G,EAAmB4G,OAAOpC,KAIjC,gBAAC,IAAD,CAAQ3E,UAAU,OAAOkF,QAAST,KAAKV,kBAAmBiD,KAAK,MAA/D,aAIF,gBAAC,IAAD,CACE3C,OAAkC,MAA1BI,KAAKjB,MAAMM,aAAuD,aAAhCW,KAAKjB,MAAMM,YAAYE,KACjEI,OAAQK,KAAKf,kBAEb,wBAAM4B,SAAUb,KAAKnB,oBACnB,gBAAC,IAAD,KACE,uBAAKtD,UAAU,cACb,yBAAOiH,QAAQ,UAAf,2BACA,yBACEjH,UAAU,eACVkH,GAAG,SACH/E,KAAK,SACLwD,SAAUlB,KAAKP,iBACf2B,YAAY,kBACZ3C,MAAOuB,KAAKjB,MAAMC,cAClB0D,UAAQ,MAId,gBAAC,IAAD,KACE,gBAAC,IAAD,CAAQvC,MAAM,YAAYM,QAAST,KAAKf,iBAAkB0D,SAAO,EAACpD,KAAK,UAAvE,UAGA,gBAAC,IAAD,CAAQY,MAAM,UAAUZ,KAAK,UAA7B,gB,GAzKOqD,aAqLLC,cACdC,aAAsC,SAAC/D,GAAD,MAAY,CAChDd,cAAec,EAAMd,cACrBgC,kBAAmBlB,EAAMkB,kBACzBT,UAAWT,EAAMS,UACjBwC,UAAWjD,EAAMgE,gBAAkB,EACnC7C,UAAWnB,EAAMmB,aALnB4C,CAMIlF,IC3QAoF,EAAWJ,QAAW,kBAAM,uDAC5BK,EAAcL,QAAW,kBAAM,uDAC/BM,EAAQN,QAAW,kBAAM,uDACzBO,EAAeP,QAAW,kBAAM,uDAEtC,SAASQ,IACP,OACE,uBAAK7H,UAAU,kBACb,uBAAKA,UAAU,6BACb,gBAAC,EAAD,CAASA,UAAU,OAAOgE,KAAK,iBADjC,kBAQS,SAAS8D,IACtB,IAAMnF,EAAWoF,cAKjB,OAJAV,aAAgB,WACd1E,EAASqF,iBACR,CAACrF,IAGF,gBAAC,IAAD,KACE,2BAME,gBAAC,IAAD,CAAOsF,UAAW5F,IAClB,gBAAC,WAAD,CAAgB6F,SAAU,gBAACL,EAAD,OACxB,gBAAC,IAAD,CAAOM,OAAK,EAACC,KAAK,IAAIH,UAAWR,IACjC,gBAAC,IAAD,CAAOW,KAAK,eAAeH,UAAWP,IACtC,gBAAC,IAAD,CAAOU,KAAK,kBAAkBH,UAAWN,IACzC,gBAAC,IAAD,CAAOS,KAAK,gBAAgBH,UAAWL,KAEzC,0BAAQ5H,UAAU,iBAChB,gBAAC,IAAD,KAyBE,gBAAC,IAAD,KACE,gBAAC,IAAD,KACE,yBAAOA,UAAU,kBAAjB,mBACmB,IACjB,qBAAGA,UAAU,iBAAiBqI,KAAK,uBAAnC,oB,8ECrEZC,EAAcC,QACW,cAA7BnI,OAAOoI,SAASC,UAEe,UAA7BrI,OAAOoI,SAASC,UAEhBrI,OAAOoI,SAASC,SAASC,MAAM,2DAqCnC,SAASC,EAAgBC,GACvBC,UAAUC,cACPC,SAASH,GACTI,MAAK,SAACC,GACLA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACtCD,EAAiBE,cAAgB,WACA,cAA3BF,EAAiB3F,QACfqF,UAAUC,cAAcQ,WAK1BC,QAAQC,IAAI,6CAKZD,QAAQC,IAAI,4CAMrBC,OAAM,SAACC,GACNH,QAAQG,MAAM,4CAA6CA,M,YC9D3DC,EAAcC,SAASC,eAAe,QAC5C,GAAmB,MAAfF,EAAqB,MAAM,IAAIG,MAAM,uCAGzC,IAAMC,EAAmB3J,OAAO4J,sCAAwCC,IAqBlEC,EAAQC,aClCC,SAAU3G,EAAiB4B,GACxC,OAAQA,EAAOpB,MACb,IAAK,aACH,IAAMoG,GACsC,IAA1C5G,EAAM6G,QAAQC,QAAQlF,EAAO5D,QAA7B,sBACQgC,EAAM6G,SADd,CACuBjF,EAAO5D,SAC1BgC,EAAM6G,QACZ,OAAO,2BACF7G,GADL,IAEE6G,QAASD,IAGb,IAAK,kBACH,IAAMA,GACkD,IAAtD5G,EAAM6G,QAAQC,QAAQlF,EAAOmF,YAAY/I,QAAzC,sBACQgC,EAAM6G,SADd,CACuBjF,EAAOmF,YAAY/I,SACtCgC,EAAM6G,QAIZ,OAAO,2BACF7G,GADL,IAEEgH,kBAAmBhH,EAAMgH,kBAAoB,EAC7CH,QAASD,EACTK,aAAa,GAAD,mBACPjH,EAAMiH,cADC,4BAELrF,EAAOmF,aAFF,IAEerD,GAAI1D,EAAMgH,wBAIzC,IAAK,mBAEH,IAAMJ,EAAc,IAAIM,IAAIlH,EAAM6G,SAC9BG,EAAoBhH,EAAMgH,kBACxBG,EAAkBvF,EAAOqF,aAAaG,KAAI,SAACL,GAC/CH,EAAYS,IAAIN,EAAY/I,QAC5B,IAAMsJ,EAAc,2BAAQP,GAAR,IAAqBrD,GAAIsD,IAE7C,OADAA,GAAqB,EACdM,KAGT,OAAO,2BACFtH,GADL,IAEEgH,oBACAH,QAASU,MAAMC,KAAKZ,GACpBK,aAAcjH,EAAMiH,aAAaQ,OAAON,KAG5C,IAAK,mBACH,OAAO,2BACFnH,GADL,IAEE0H,YAAY,2BACP1H,EAAM0H,aADA,IAETC,SAAU/F,EAAO+F,aAGvB,IAAK,mBACH,OAAO,2BACF3H,GADL,IAEEgH,kBAAmB,EACnBH,QAAS,GACTI,aAAc,KAElB,IAAK,iBAEH,IAAMJ,EAAUjF,EAAOiF,QACvB,OAAO,2BACF7G,GADL,IAEE6G,QAAS7G,EAAM6G,QAAQe,QAAO,SAAC5J,GAAD,OAAyC,IAA7B6I,EAAQC,QAAQ9I,QAG9D,IAAK,sBAEH,IAAMiJ,EAAerF,EAAOqF,aAC5B,OAAO,2BACFjH,GADL,IAEEiH,aAAcjH,EAAMiH,aAAaW,QAC/B,SAACb,GAAD,OAAwD,IAAvCE,EAAaH,QAAQC,QAI5C,IAAK,qBACH,IAAMc,EAAezB,SAAS0B,KAC9B,GAAoB,MAAhBD,EAAsB,MAAM,IAAIvB,MAAM,oCAE1C,IAAMyB,EAAUC,IAAaC,YAAoBjI,EAAMiH,aAAcjH,EAAMkI,QAAS,CAClFC,QAAS,CACP,SACA,OACA,OACA,OACA,SACA,QACA,aACA,aACA,SAEFC,QAAQ,IAKJC,EAAO,IAAIC,KAAK,CAACP,GAAU,CAAEvH,KAAM,aACnC+H,EAAInC,SAASoC,cAAc,KAC3BC,EAAMC,IAAIC,gBAAgBN,GAQhC,OAPAE,EAAEK,SAAW,mBACbL,EAAE1D,KAAO4D,EACTF,EAAEM,MAAMC,QAAU,OAClBjB,EAAakB,YAAYR,GACzBA,EAAES,QACFN,IAAIO,gBAAgBR,GAEbzI,EAET,IAAK,gCACH,OAAO,2BACFA,GADL,IAEEkJ,yBAAyB,IAE7B,IAAK,gCACH,OAAO,2BACFlJ,GADL,IAEEkJ,yBAAyB,IAE7B,IAAK,gCACH,OAAO,2BACFlJ,GADL,IAEEd,cAAe0C,EAAO1C,cACtBgK,yBAAyB,IAE7B,IAAK,4BACH,OAAO,2BACFlJ,GADL,IAEEgE,gBAAiBhE,EAAMgE,gBAAkB,IAE7C,IAAK,4BACH,OAAO,2BACFhE,GADL,IAEEgE,gBAAiBhE,EAAMgE,gBAAkB,IAE7C,IAAK,4BACH,OAAO,2BACFhE,GADL,IAEEmJ,OAAO,2BAAMnJ,EAAMmJ,QAAb,IAAqB,CAACvH,EAAO5D,QAAS4D,EAAOwH,WAAWC,QAC9DrF,gBAAiBhE,EAAMgE,gBAAkB,EACzCkE,OAAO,2BAAMlI,EAAMkI,QAAb,IAAqB,CAACtG,EAAO5D,QAAS4D,EAAOwH,WAAWE,UAElE,IAAK,uBACH,OAAO,2BACFtJ,GADL,IAEEkB,kBAAmBU,EAAOsE,MAAMqD,QAChCvF,gBAAiBhE,EAAMgE,gBAAkB,IAE7C,IAAK,uBACH,OAAO,2BACFhE,GADL,IAEEkB,kBAAmB,KACnB8C,gBAAiBhE,EAAMgE,gBAAkB,IAE7C,IAAK,uBACH,OAAO,2BACFhE,GADL,IAEEgE,gBAAiBhE,EAAMgE,gBAAkB,EACzCkE,OAAQtG,EAAOsG,OACf/G,UAAWkC,KAAKmG,QAEpB,IAAK,kBACH,OAAO,2BACFxJ,GADL,IAEES,UAAWmB,EAAOnB,YAEtB,QACE,OAAOT,KD3JkB,CAC7Bd,cAAe,KACfwI,YAAa,CACXC,SAAU,IAEZwB,OAAQ,GACRjI,kBAAmB,KACnBT,UAAW,GACXyI,yBAAyB,EACzBlF,gBAAiB,EACjBgD,kBAAmB,EACnBkB,OAAQ,GACRrB,QAAS,GACTI,aAAc,GACd9F,UAAW,MAMXoF,EACEkD,YAAgBC,KAChBC,IAGE,CACE,gBACA,cACA,YACA,oBACA,SACA,UACA,eACA,aAEF,CACEC,IAAK,cAMbC,IAASC,OACP,kBAAC,IAAD,CAAUpD,MAAOA,GACf,kBAAC,EAAD,OAEFP,GDnDa,WACb,GAA6C,kBAAmBd,UAAW,CAGzE,GADkB,IAAIqD,IAAIqB,WAAwBnN,OAAOoI,UAC3CgF,SAAWpN,OAAOoI,SAASgF,OAIvC,OAGFpN,OAAOqN,iBAAiB,QAAQ,WAC9B,IAAM7E,EAAK,UAAM2E,WAAN,sBAEPjF,IAiDV,SAAiCM,GAE/B8E,MAAM9E,GACHI,MAAK,SAAC2E,GAGiB,MAApBA,EAASC,SACuD,IAAhED,EAASE,QAAQC,IAAI,gBAAgBxD,QAAQ,cAG7CzB,UAAUC,cAAciF,MAAM/E,MAAK,SAACC,GAClCA,EAAa+E,aAAahF,MAAK,WAC7B5I,OAAOoI,SAASyF,eAKpBtF,EAAgBC,MAGnBa,OAAM,WACLF,QAAQC,IAAI,oEApEV0E,CAAwBtF,GAIxBC,UAAUC,cAAciF,MAAM/E,MAAK,WACjCO,QAAQC,IACN,gHAMJb,EAAgBC,OCyBxBuF,I,gCEtDA,0XA0CIC,EA1CJ,yBAGMC,EAAW,gCAMV,SAASC,EAAe/D,GAC7B,MAAO,CAAEA,cAAavG,KAAM,mBAOvB,SAASuK,EAAeC,GAC7B,MAAO,CAAErD,SAAUqD,EAAcxK,KAAM,oBAGlC,SAASyK,IACd,MAAO,CAAEzK,KAAM,oBAGV,SAAS0K,EAAcrE,GAC5B,MAAO,CAAEA,UAASrG,KAAM,kBAGnB,SAAS2K,EAAmBlE,GACjC,MAAO,CAAEA,eAAczG,KAAM,uBAGxB,SAAS4K,IACd,MAAO,CAAE5K,KAAM,sBAGV,SAAST,EAAaU,GAC3B,MAAO,CAAEA,YAAWD,KAAM,mBAM5B,SAAS6K,IACsB,MAAzBT,IACFU,aAAaV,GACbA,EAAwB,MAoBrB,SAASW,EAAgBvN,GAC9B,OAAO,SAAUmB,EAAoBqM,GACnCrM,EAAS,CAAEqB,KAAM,8BACjB0J,MAAM,GAAD,OACAW,EADA,oBACoB7M,EADpB,2BAC6CwN,IAAW/K,YAE1D+E,MAAK,SAAC2E,GACLA,EACGsB,OACAjG,MAAK,SAAC4D,GACLjK,EAAS,CAAEnB,SAAQoL,aAAY5I,KAAM,iCAEtCyF,OAAM,SAACC,GACN/G,EAAS,CAAE+G,QAAO1F,KAAM,oCAG7ByF,OAAM,SAACC,GACN/G,EAAS,CAAE+G,QAAO1F,KAAM,kCAKzB,SAASgE,IACd,OAAO,SAAUrF,EAAoBqM,GACnC,SAASE,IAIPL,IACAM,YAAW,WACTxM,EAASqF,OACR,KAKL,GAAuB,IADHgH,IAAZ3E,QACI1I,OAKV,OAFAkN,SACAK,IAIFL,IACAlM,EAAS,CAAEqB,KAAM,yBACjBoL,MAAM,MACN1B,MAAM,GAAD,OACAW,EADA,2BAEDW,IAAW/K,UAFV,oBAGS+K,IAAW3E,QAAQgF,KAAK,OAEnCrG,MAAK,SAAC2E,GACLyB,MAAM,OACNzB,EACGsB,OACAjG,MAAK,SAACsG,GAQLF,MAAM,SACNJ,IAAWxN,OAAO+N,SAAQ,SAAC/N,GACzB4N,MAAM,WAURzM,EAAS,CAAE+I,OAfQ,GAeY1H,KAAM,4BAEtCyF,OAAM,SAACC,GACN/G,EAAS,CAAE+G,QAAO1F,KAAM,+BAG7ByF,OAAM,SAACC,GACN/G,EAAS,CAAE+G,QAAO1F,KAAM,4BAEzBwL,SAAQ,WACPN,QAKD,SAAStM,IACd,OAAO,SAAUD,EAAoBqM,GACnCrM,EAAS,CAAEqB,KAAM,kCACjB0J,MAAM,GAAD,OAAIW,EAAJ,+BAAmCW,IAAW/K,YAChD+E,MAAK,SAAC2E,GACLA,EACGsB,OACAjG,MAAK,SAACsG,GACL3M,EAAS,CAAED,cAAe4M,EAAMtL,KAAM,qCAEvCyF,OAAM,SAACC,GACN/G,EAAS,CAAE+G,QAAO1F,KAAM,wCAG7ByF,OAAM,SAACC,GACN/G,EAAS,CAAE+G,QAAO1F,KAAM,sCAKzB,SAASyL,EAAuBC,GACrC,OAAO,SAAU/M,GACfA,EAAS,CAAEqB,KAAM,qCACjB,IAAM2L,EAAa,IAAIC,WACvBD,EAAWE,QAAU,WACnBlN,EAAS,CAAEqB,KAAM,sCAEnB2L,EAAWG,OAAS,WAClB,IAAMC,EAAYC,IAASL,EAAWM,OAAQ,CAAEtE,SAAS,IACzDhJ,EA7KG,CAAE8H,aA6KoByF,YAAoBH,GA7K1B/L,KAAM,qBA8KzBrB,EAASqF,KACTrF,EAAS,CAAEqB,KAAM,sCAEnB2L,EAAWQ,WAAWT,M,gCChMnB,SAASQ,EAAoBE,GAClC,OAAOA,EAAexF,KAAI,SAACL,GAAD,MAAkB,CAC1C8F,UAAyC,KAA9B9F,EAAY,cAAuB,KAAO+F,WAAW/F,EAAY,eAC5EgG,WAAYD,WAAW/F,EAAYiG,YACnCC,KAAMlG,EAAY1D,KAClBK,IAAK,EACLwJ,MAAOnG,EAAYoG,MACnBC,MAAON,WAAW/F,EAAYsG,OAC9BC,OAAQR,WAAW/F,EAAYwG,QAC/BvP,OAAQ+I,EAAYyG,OACpBhN,KAAMuG,EAAY0G,SAIf,SAASxF,EACdyF,EACAxF,GAEA,OAAOwF,EAAmBtG,KAAI,SAACL,GAAD,MAAkB,CAC9C,aAAuC,MAAzBA,EAAY8F,UAAoB,GAAhC,UAAwC9F,EAAY8F,WAClEG,WAAW,GAAD,OAAKjG,EAAYgG,YAC3B1J,KAA0B,MAApB0D,EAAYkG,KAAe,GAAKlG,EAAYkG,KAClDU,KAAoC,MAA9BzF,EAAOnB,EAAY/I,QAAkB,GAAKkK,EAAOnB,EAAY/I,QAAQ4P,YAC3ET,MAA4B,MAArBpG,EAAYmG,MAAgB,GAAKnG,EAAYmG,MACpDG,MAAM,GAAD,OAAKtG,EAAYqG,OACtBG,OAAO,GAAD,OAAKxG,EAAYuG,QACvBE,OAAQzG,EAAY/I,OACpByP,KAAM1G,EAAYvG,SA3BtB,qE","file":"static/js/main.bcb25440.chunk.js","sourcesContent":["/* @flow */\r\n\r\nimport \"./SpinKit.css\";\r\nimport * as React from \"react\";\r\nimport cx from \"classnames\";\r\n\r\ntype Props = {\r\n  className?: string,\r\n  title?: string,\r\n  type: \"folding-cube\",\r\n};\r\n\r\nexport default function SpinKit(props: Props): React.Node {\r\n  return (\r\n    <div className={cx(\"sk-folding-cube-wrapper\", props.className)}>\r\n      <div className=\"sk-folding-cube\" title={props.title}>\r\n        <div className=\"sk-cube1 sk-cube\" />\r\n        <div className=\"sk-cube2 sk-cube\" />\r\n        <div className=\"sk-cube4 sk-cube\" />\r\n        <div className=\"sk-cube3 sk-cube\" />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","/* @flow */\r\n\r\nimport \"./Navbar.css\";\r\nimport * as React from \"react\";\r\nimport {\r\n  Button,\r\n  Collapse,\r\n  Form,\r\n  Modal,\r\n  ModalBody,\r\n  ModalFooter,\r\n  Navbar as ReactstrapNavbar,\r\n  NavbarBrand,\r\n  NavbarToggler,\r\n} from \"reactstrap\";\r\nimport type { Dispatch, IEXSymbol } from \"./Types\";\r\nimport { NavLink, type RouterHistory, withRouter } from \"react-router-dom\";\r\nimport { fetchAllIexSymbols, setIexApiKey } from \"./actions\";\r\nimport Autosuggest from \"react-autosuggest\";\r\nimport SpinKit from \"./SpinKit\";\r\nimport { connect } from \"react-redux\";\r\nimport cx from \"classnames\";\r\n\r\ntype RouterProps = {\r\n  history: RouterHistory,\r\n};\r\n\r\ntype StateProps = {\r\n  allIexSymbols: ?Array<IEXSymbol>,\r\n  fetchErrorMessage: ?string,\r\n  iexApiKey: ?string,\r\n  isLoading: boolean,\r\n  updatedAt: ?number,\r\n};\r\n\r\ntype ConnectProps = StateProps & { dispatch: Dispatch };\r\n\r\ntype Props = RouterProps & ConnectProps;\r\n\r\ntype State = {\r\n  activeModal: ?{ type: \"settings\" },\r\n  isOpen: boolean,\r\n  nextIexApiKey: string,\r\n  searchIsFocused: boolean,\r\n  searchQuery: string,\r\n  searchResults: Array<IEXSymbol>,\r\n};\r\n\r\nconst updatedAtFormatter = new window.Intl.DateTimeFormat(undefined, {\r\n  day: \"numeric\",\r\n  hour: \"numeric\",\r\n  hour12: false,\r\n  minute: \"numeric\",\r\n  month: \"numeric\",\r\n  second: \"numeric\",\r\n  year: \"numeric\",\r\n});\r\n\r\nfunction findFirstNSymbols(n: number, collection: Array<IEXSymbol>, search: string) {\r\n  // Symbols are always uppercase, ensure uppercase to match.\r\n  const uppercaseSearch = search.toUpperCase();\r\n  const results: Array<IEXSymbol> = [];\r\n  collection.some((iexSymbol) => {\r\n    if (iexSymbol.symbol.startsWith(uppercaseSearch)) {\r\n      results.push(iexSymbol);\r\n      if (results.length === n) return true;\r\n    }\r\n    return false;\r\n  });\r\n  return results;\r\n}\r\n\r\nfunction noop() {}\r\n\r\nfunction Suggestion(suggestion: IEXSymbol, { query }: { query: string }) {\r\n  // This is a simple prefix search (see `findFirstNSymbols`), so the starting index to highlight\r\n  // is assumed to be 0.\r\n  const highlightedSlice = suggestion.symbol.slice(0, query.length);\r\n  const normalSlice = suggestion.symbol.slice(query.length);\r\n  return (\r\n    <span>\r\n      <strong>{highlightedSlice}</strong>\r\n      <span>{normalSlice}</span> - {suggestion.name}\r\n    </span>\r\n  );\r\n}\r\n\r\nfunction SuggestionValue(suggestion: IEXSymbol) {\r\n  return suggestion.symbol;\r\n}\r\n\r\nclass Navbar extends React.Component<Props, State> {\r\n  constructor(props: Props) {\r\n    super(props);\r\n    this.state = {\r\n      activeModal: null,\r\n      isOpen: false,\r\n      nextIexApiKey: \"\",\r\n      searchIsFocused: false,\r\n      searchQuery: \"\",\r\n      searchResults: [],\r\n    };\r\n  }\r\n\r\n  handleSearchBlur = () => {\r\n    this.setState({ searchIsFocused: false });\r\n  };\r\n\r\n  handleSearchFocus = () => {\r\n    if (this.props.allIexSymbols == null) {\r\n      this.props.dispatch(fetchAllIexSymbols());\r\n    }\r\n    this.setState({ searchIsFocused: true });\r\n  };\r\n\r\n  handleSearchQueryChange = (event: SyntheticInputEvent<HTMLInputElement>) => {\r\n    if (event.currentTarget.nodeName !== \"INPUT\") return;\r\n    this.setSearchQuery(event.currentTarget.value);\r\n  };\r\n\r\n  handleSearchQueryClear = () => {\r\n    this.setSearchQuery(\"\");\r\n  };\r\n\r\n  handleSearchSubmit = (event: SyntheticEvent<HTMLFormElement>) => {\r\n    event.preventDefault();\r\n  };\r\n\r\n  handleSetIexApiKey = (event: SyntheticEvent<HTMLFormElement>) => {\r\n    event.preventDefault();\r\n    this.props.dispatch(setIexApiKey(this.state.nextIexApiKey));\r\n    this.closeActiveModal();\r\n  };\r\n\r\n  handleSuggestionSelected = (event: Event, { suggestionValue }: { suggestionValue: string }) => {\r\n    this.props.history.push(`/stocks/${suggestionValue}`);\r\n  };\r\n\r\n  setSearchQuery(nextSearchQuery: string) {\r\n    this.setState({\r\n      searchQuery: nextSearchQuery,\r\n      searchResults:\r\n        this.props.allIexSymbols == null\r\n          ? []\r\n          : findFirstNSymbols(5, this.props.allIexSymbols, nextSearchQuery),\r\n    });\r\n  }\r\n\r\n  closeActiveModal = () => {\r\n    this.setState({ activeModal: null });\r\n  };\r\n\r\n  openSettingsModal = () => {\r\n    this.setState({\r\n      activeModal: { type: \"settings\" },\r\n      nextIexApiKey: this.props.iexApiKey == null ? \"\" : this.props.iexApiKey,\r\n    });\r\n  };\r\n\r\n  setNextIexApiKey = (event) => {\r\n    this.setState({ nextIexApiKey: event.target.value });\r\n  };\r\n\r\n  toggle = () => {\r\n    this.setState({ isOpen: !this.state.isOpen });\r\n  };\r\n\r\n  render() {\r\n    // Create local references to enable Flow refinement beyond `null | undefined`.\r\n    const { fetchErrorMessage, updatedAt } = this.props;\r\n    return (\r\n      <ReactstrapNavbar color=\"dark\" dark expand=\"md\">\r\n        <NavbarBrand className=\"text-warning\" tag={NavLink} to=\"/\">\r\n          Finance!\r\n        </NavbarBrand>\r\n        <NavbarToggler onClick={this.toggle} />\r\n        <Collapse isOpen={this.state.isOpen} navbar>\r\n          <Form\r\n            action=\"/finance/stocks\"\r\n            className=\"mr-auto\"\r\n            inline\r\n            onSubmit={this.handleSearchSubmit}\r\n          >\r\n            <Autosuggest\r\n              getSuggestionValue={SuggestionValue}\r\n              highlightFirstSuggestion\r\n              inputProps={{\r\n                name: \"symbol\",\r\n                onBlur: this.handleSearchBlur,\r\n                onChange: this.handleSearchQueryChange,\r\n                onFocus: this.handleSearchFocus,\r\n                placeholder: \"Search...\",\r\n                value: this.state.searchQuery,\r\n              }}\r\n              onSuggestionsClearRequested={this.handleSearchQueryClear}\r\n              onSuggestionsFetchRequested={noop}\r\n              onSuggestionSelected={this.handleSuggestionSelected}\r\n              renderSuggestion={Suggestion}\r\n              suggestions={this.state.searchResults}\r\n              theme={{\r\n                container: \"autosuggest\",\r\n                input: cx(\"dark-transition form-control\", {\r\n                  \"bg-dark\": !this.state.searchIsFocused,\r\n                }),\r\n                suggestionsContainer: \"dropdown\",\r\n                suggestionsList: `dropdown-menu ${\r\n                  this.state.searchResults.length > 0 ? \"show\" : \"\"\r\n                }`,\r\n                suggestion: \"dropdown-item\",\r\n                suggestionHighlighted: \"active\",\r\n              }}\r\n            />\r\n          </Form>\r\n          {this.props.isLoading ? (\r\n            <SpinKit title=\"Fetching new quotes...\" type=\"folding-cube\" />\r\n          ) : null}\r\n          {fetchErrorMessage == null ? null : (\r\n            <abbr className=\"mr-1\" title={`Error: ${fetchErrorMessage}`}>\r\n              <span aria-label=\"Connection error\" className=\"text-danger\" role=\"img\">\r\n                ⚠️\r\n              </span>\r\n            </abbr>\r\n          )}\r\n          <small>\r\n            <span className=\"text-white-50\">Quotes last fetched: </span>\r\n            {updatedAt == null ? (\r\n              <span className=\"text-white\">never</span>\r\n            ) : (\r\n              <time className=\"text-white\" dateTime={new Date(updatedAt).toISOString()}>\r\n                {updatedAtFormatter.format(updatedAt)}\r\n              </time>\r\n            )}\r\n          </small>\r\n          <Button className=\"ml-2\" onClick={this.openSettingsModal} size=\"sm\">\r\n            Settings\r\n          </Button>\r\n        </Collapse>\r\n        <Modal\r\n          isOpen={this.state.activeModal != null && this.state.activeModal.type === \"settings\"}\r\n          toggle={this.closeActiveModal}\r\n        >\r\n          <form onSubmit={this.handleSetIexApiKey}>\r\n            <ModalBody>\r\n              <div className=\"form-group\">\r\n                <label htmlFor=\"apiKey\">IEX Publishable API Key</label>\r\n                <input\r\n                  className=\"form-control\"\r\n                  id=\"apiKey\"\r\n                  name=\"apiKey\"\r\n                  onChange={this.setNextIexApiKey}\r\n                  placeholder=\"pk_abc123…\"\r\n                  value={this.state.nextIexApiKey}\r\n                  required\r\n                />\r\n              </div>\r\n            </ModalBody>\r\n            <ModalFooter>\r\n              <Button color=\"secondary\" onClick={this.closeActiveModal} outline type=\"button\">\r\n                Cancel\r\n              </Button>\r\n              <Button color=\"primary\" type=\"submit\">\r\n                Save\r\n              </Button>\r\n            </ModalFooter>\r\n          </form>\r\n        </Modal>\r\n      </ReactstrapNavbar>\r\n    );\r\n  }\r\n}\r\n\r\n// $FlowFixMe: stop using these HOC, switch to hooks\r\nexport default (withRouter<Navbar>(\r\n  connect<ConnectProps, {}, _, _, _, _>((state) => ({\r\n    allIexSymbols: state.allIexSymbols,\r\n    fetchErrorMessage: state.fetchErrorMessage,\r\n    iexApiKey: state.iexApiKey,\r\n    isLoading: state.isFetchingCount > 0,\r\n    updatedAt: state.updatedAt,\r\n  }))(Navbar)\r\n): React.ComponentType<*>);\r\n","/* @flow */\r\n\r\nimport \"./App.css\";\r\nimport * as React from \"react\";\r\nimport { HashRouter as Router, Route } from \"react-router-dom\";\r\nimport { Col, Container, Row } from \"reactstrap\";\r\nimport type { Dispatch } from \"./types\";\r\nimport Navbar from \"./Navbar\";\r\nimport SpinKit from \"./SpinKit\";\r\nimport { fetchAllQuotes } from \"./actions\";\r\nimport { useDispatch } from \"react-redux\";\r\n\r\nconst Overview = React.lazy(() => import(\"./Overview\"));\r\nconst Performance = React.lazy(() => import(\"./Performance\"));\r\nconst Stock = React.lazy(() => import(\"./Stock\"));\r\nconst Transactions = React.lazy(() => import(\"./Transactions\"));\r\n\r\nfunction LoadingIndicator() {\r\n  return (\r\n    <div className=\"container my-3\">\r\n      <div className=\"d-flex align-items-center\">\r\n        <SpinKit className=\"mr-2\" type=\"folding-cube\" />\r\n        Loading…\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default function App(): React.Node {\r\n  const dispatch = useDispatch<Dispatch>();\r\n  React.useEffect(() => {\r\n    dispatch(fetchAllQuotes());\r\n  }, [dispatch]);\r\n\r\n  return (\r\n    <Router>\r\n      <div>\r\n        {/* Wrap the `Navbar` in a pathless route to ensure it is always rendered and always updates\r\n            on navigation. Updates are blocked because internally the `Navbar` is wrapped by\r\n            react-redux's `connect`.\r\n\r\n            See: React Router's [\"Dealing With Update Blocking\"][0] */}\r\n        <Route component={Navbar} />\r\n        <React.Suspense fallback={<LoadingIndicator />}>\r\n          <Route exact path=\"/\" component={Overview} />\r\n          <Route path=\"/performance\" component={Performance} />\r\n          <Route path=\"/stocks/:symbol\" component={Stock} />\r\n          <Route path=\"/transactions\" component={Transactions} />\r\n        </React.Suspense>\r\n        <footer className=\"bg-light py-4\">\r\n          <Container>\r\n            {/* <Row>\r\n              <Col>\r\n                <small className=\"text-secondary\">\r\n                  Created by Ross Allen &lt;\r\n                  <a className=\"link-secondary\" href=\"https://github.com/ssorallen\">\r\n                    ssorallen\r\n                  </a>\r\n                  &gt;{\" \"}\r\n                  <span aria-label=\"\" role=\"img\">\r\n                    🦉\r\n                  </span>\r\n                </small>\r\n              </Col>\r\n            </Row>\r\n            <Row>\r\n              <Col>\r\n                <small className=\"text-secondary\">\r\n                  Source available at{\" \"}\r\n                  <a className=\"link-secondary\" href=\"https://github.com/ssorallen/finance\">\r\n                    ssorallen/finance\r\n                  </a>\r\n                </small>\r\n              </Col>\r\n            </Row> */}\r\n            <Row>\r\n              <Col>\r\n                <small className=\"text-secondary\">\r\n                  Data provided by{\" \"}\r\n                  <a className=\"link-secondary\" href=\"https://iexcloud.io\">\r\n                    IEX Cloud\r\n                  </a>\r\n                </small>\r\n              </Col>\r\n            </Row>\r\n          </Container>\r\n        </footer>\r\n      </div>\r\n    </Router>\r\n  );\r\n}\r\n\r\n// [0]: https://github.com/ReactTraining/react-router/blob/4b61484ec9eea4bc3a2eb36028c47934414542ae/packages/react-router/docs/guides/blocked-updates.md\r\n","// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === \"localhost\" ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === \"[::1]\" ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\r\n);\r\n\r\nexport default function register() {\r\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener(\"load\", () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Lets check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            \"This web app is being served cache-first by a service \" +\r\n              \"worker. To learn more, visit https://goo.gl/SC7cgQ\"\r\n          );\r\n        });\r\n      } else {\r\n        // Is not local host. Just register service worker\r\n        registerValidSW(swUrl);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then((registration) => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === \"installed\") {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the old content will have been purged and\r\n              // the fresh content will have been added to the cache.\r\n              // It's the perfect time to display a \"New content is\r\n              // available; please refresh.\" message in your web app.\r\n              console.log(\"New content is available; please refresh.\");\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log(\"Content is cached for offline use.\");\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch((error) => {\r\n      console.error(\"Error during service worker registration:\", error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then((response) => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get(\"content-type\").indexOf(\"javascript\") === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\"No internet connection found. App is running in offline mode.\");\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if (\"serviceWorker\" in navigator) {\r\n    navigator.serviceWorker.ready.then((registration) => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","/* @flow */\r\n\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport \"react-table/react-table.css\";\r\nimport { applyMiddleware, compose, createStore } from \"redux\";\r\nimport App from \"./App\";\r\nimport type { AppState } from \"./types\";\r\nimport { Provider } from \"react-redux\";\r\nimport React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport persistState from \"redux-localstorage\";\r\nimport reducers from \"./reducers\";\r\nimport registerServiceWorker from \"./registerServiceWorker\";\r\nimport thunk from \"redux-thunk\";\r\n\r\nconst rootElement = document.getElementById(\"root\");\r\nif (rootElement == null) throw new Error(\"Missing element #root to render app\");\r\n\r\n// Enable Redux Devtools in the browser.\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\n\r\n// Pass an initial state to `createStore` rather than use a default argument in the reducer to\r\n// enable 'redux-localstorage' to merge its persisted state with this initial state.\r\nconst initialState: AppState = {\r\n  allIexSymbols: null,\r\n  appSettings: {\r\n    pageSize: 10,\r\n  },\r\n  charts: {},\r\n  fetchErrorMessage: null,\r\n  iexApiKey: \"\",\r\n  isFetchingAllIexSymbols: false,\r\n  isFetchingCount: 0,\r\n  nextTransactionId: 1,\r\n  quotes: {},\r\n  symbols: [],\r\n  transactions: [],\r\n  updatedAt: null,\r\n};\r\n\r\nconst store = createStore(\r\n  reducers,\r\n  initialState,\r\n  composeEnhancers(\r\n    applyMiddleware(thunk),\r\n    persistState(\r\n      // Any keys in the following Array will be persisted from the store to local storage and\r\n      // re-hydrated when the app re-loads.\r\n      [\r\n        \"allIexSymbols\",\r\n        \"appSettings\",\r\n        \"iexApiKey\",\r\n        \"nextTransactionId\",\r\n        \"quotes\",\r\n        \"symbols\",\r\n        \"transactions\",\r\n        \"updatedAt\",\r\n      ],\r\n      {\r\n        key: \"default\",\r\n      }\r\n    )\r\n  )\r\n);\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>,\r\n  rootElement\r\n);\r\nregisterServiceWorker();\r\n","/* @flow */\r\n\r\nimport type { Action, AppState } from \"./types\";\r\nimport csvStringify from \"csv-stringify/lib/es5/sync\";\r\nimport { transformStocksToGf } from \"./transformers\";\r\n\r\nexport default function (state: AppState, action: Action): AppState {\r\n  switch (action.type) {\r\n    case \"ADD_SYMBOL\": {\r\n      const nextSymbols =\r\n        state.symbols.indexOf(action.symbol) === -1\r\n          ? [...state.symbols, action.symbol]\r\n          : state.symbols;\r\n      return {\r\n        ...state,\r\n        symbols: nextSymbols,\r\n      };\r\n    }\r\n    case \"ADD_TRANSACTION\": {\r\n      const nextSymbols =\r\n        state.symbols.indexOf(action.transaction.symbol) === -1\r\n          ? [...state.symbols, action.transaction.symbol]\r\n          : state.symbols;\r\n\r\n      // Adding a new Transaction also adds the Transaction's symbol to the list of symbols to\r\n      // watch.\r\n      return {\r\n        ...state,\r\n        nextTransactionId: state.nextTransactionId + 1,\r\n        symbols: nextSymbols,\r\n        transactions: [\r\n          ...state.transactions,\r\n          { ...action.transaction, id: state.nextTransactionId },\r\n        ],\r\n      };\r\n    }\r\n    case \"ADD_TRANSACTIONS\": {\r\n      // Ensure no duplicate symbols are added.\r\n      const nextSymbols = new Set(state.symbols);\r\n      let nextTransactionId = state.nextTransactionId;\r\n      const newTransactions = action.transactions.map((transaction) => {\r\n        nextSymbols.add(transaction.symbol);\r\n        const newTransaction = { ...transaction, id: nextTransactionId };\r\n        nextTransactionId += 1;\r\n        return newTransaction;\r\n      });\r\n\r\n      return {\r\n        ...state,\r\n        nextTransactionId,\r\n        symbols: Array.from(nextSymbols),\r\n        transactions: state.transactions.concat(newTransactions),\r\n      };\r\n    }\r\n    case \"CHANGE_PAGE_SIZE\":\r\n      return {\r\n        ...state,\r\n        appSettings: {\r\n          ...state.appSettings,\r\n          pageSize: action.pageSize,\r\n        },\r\n      };\r\n    case \"DELETE_PORTFOLIO\":\r\n      return {\r\n        ...state,\r\n        nextTransactionId: 1,\r\n        symbols: [],\r\n        transactions: [],\r\n      };\r\n    case \"DELETE_SYMBOLS\": {\r\n      // Preserve Flow refinement inside `filter` by keeping a reference to `symbols`.\r\n      const symbols = action.symbols;\r\n      return {\r\n        ...state,\r\n        symbols: state.symbols.filter((symbol) => symbols.indexOf(symbol) === -1),\r\n      };\r\n    }\r\n    case \"DELETE_TRANSACTIONS\": {\r\n      // Preserve Flow refinement inside `filter` by keeping a reference to `transactions`.\r\n      const transactions = action.transactions;\r\n      return {\r\n        ...state,\r\n        transactions: state.transactions.filter(\r\n          (transaction) => transactions.indexOf(transaction) === -1\r\n        ),\r\n      };\r\n    }\r\n    case \"DOWNLOAD_PORTFOLIO\": {\r\n      const documentBody = document.body;\r\n      if (documentBody == null) throw new Error(\"How in the hell did we get here?\");\r\n\r\n      const csvData = csvStringify(transformStocksToGf(state.transactions, state.quotes), {\r\n        columns: [\r\n          \"Symbol\",\r\n          \"Name\",\r\n          \"Type\",\r\n          \"Date\",\r\n          \"Shares\",\r\n          \"Price\",\r\n          \"Cash value\",\r\n          \"Commission\",\r\n          \"Notes\",\r\n        ],\r\n        header: true,\r\n      });\r\n\r\n      // The following is some funky funkiness to download a file generated in JS. Get down with\r\n      // this funk.\r\n      const blob = new Blob([csvData], { type: \"text/csv\" });\r\n      const a = document.createElement(\"a\");\r\n      const url = URL.createObjectURL(blob);\r\n      a.download = \"My Portfolio.csv\";\r\n      a.href = url;\r\n      a.style.display = \"none\";\r\n      documentBody.appendChild(a);\r\n      a.click();\r\n      URL.revokeObjectURL(url);\r\n\r\n      return state;\r\n    }\r\n    case \"FETCH_ALL_IEX_SYMBOLS_FAILURE\":\r\n      return {\r\n        ...state,\r\n        isFetchingAllIexSymbols: false,\r\n      };\r\n    case \"FETCH_ALL_IEX_SYMBOLS_REQUEST\":\r\n      return {\r\n        ...state,\r\n        isFetchingAllIexSymbols: true,\r\n      };\r\n    case \"FETCH_ALL_IEX_SYMBOLS_SUCCESS\":\r\n      return {\r\n        ...state,\r\n        allIexSymbols: action.allIexSymbols,\r\n        isFetchingAllIexSymbols: false,\r\n      };\r\n    case \"FETCH_SYMBOL_DATA_REQUEST\":\r\n      return {\r\n        ...state,\r\n        isFetchingCount: state.isFetchingCount + 1,\r\n      };\r\n    case \"FETCH_SYMBOL_DATA_FAILURE\":\r\n      return {\r\n        ...state,\r\n        isFetchingCount: state.isFetchingCount - 1,\r\n      };\r\n    case \"FETCH_SYMBOL_DATA_SUCCESS\":\r\n      return {\r\n        ...state,\r\n        charts: { ...state.charts, [action.symbol]: action.symbolData.chart },\r\n        isFetchingCount: state.isFetchingCount - 1,\r\n        quotes: { ...state.quotes, [action.symbol]: action.symbolData.quote },\r\n      };\r\n    case \"FETCH_QUOTES_FAILURE\":\r\n      return {\r\n        ...state,\r\n        fetchErrorMessage: action.error.message,\r\n        isFetchingCount: state.isFetchingCount - 1,\r\n      };\r\n    case \"FETCH_QUOTES_REQUEST\":\r\n      return {\r\n        ...state,\r\n        fetchErrorMessage: null,\r\n        isFetchingCount: state.isFetchingCount + 1,\r\n      };\r\n    case \"FETCH_QUOTES_SUCCESS\":\r\n      return {\r\n        ...state,\r\n        isFetchingCount: state.isFetchingCount - 1,\r\n        quotes: action.quotes,\r\n        updatedAt: Date.now(),\r\n      };\r\n    case \"SET_IEX_API_KEY\":\r\n      return {\r\n        ...state,\r\n        iexApiKey: action.iexApiKey,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","/* @flow */\r\n\r\nimport type {\r\n  AddSymbolAction,\r\n  AddTransactionAction,\r\n  AddTransactionsAction,\r\n  ChangePageSizeAction,\r\n  DeletePortfolioAction,\r\n  DeleteSymbolsAction,\r\n  DeleteTransactionsAction,\r\n  Dispatch,\r\n  DownloadPortfolioAction,\r\n  GetState,\r\n  SetIexApiKeyAction,\r\n  ThunkAction,\r\n  Transaction,\r\n} from \"./types\";\r\nimport csvParse from \"csv-parse/lib/es5/sync\";\r\nimport { transformGfToStocks } from \"./transformers\";\r\n\r\nconst IEX_ROOT = \"http://api.marketstack.com/v1\";\r\n\r\nexport function addSymbol(symbol: string): AddSymbolAction {\r\n  return { symbol, type: \"ADD_SYMBOL\" };\r\n}\r\n\r\nexport function addTransaction(transaction: Transaction): AddTransactionAction {\r\n  return { transaction, type: \"ADD_TRANSACTION\" };\r\n}\r\n\r\nexport function addTransactions(transactions: Array<Transaction>): AddTransactionsAction {\r\n  return { transactions, type: \"ADD_TRANSACTIONS\" };\r\n}\r\n\r\nexport function changePageSize(nextPageSize: number): ChangePageSizeAction {\r\n  return { pageSize: nextPageSize, type: \"CHANGE_PAGE_SIZE\" };\r\n}\r\n\r\nexport function deletePortfolio(): DeletePortfolioAction {\r\n  return { type: \"DELETE_PORTFOLIO\" };\r\n}\r\n\r\nexport function deleteSymbols(symbols: Array<string>): DeleteSymbolsAction {\r\n  return { symbols, type: \"DELETE_SYMBOLS\" };\r\n}\r\n\r\nexport function deleteTransactions(transactions: Array<Transaction>): DeleteTransactionsAction {\r\n  return { transactions, type: \"DELETE_TRANSACTIONS\" };\r\n}\r\n\r\nexport function downloadPortfolio(): DownloadPortfolioAction {\r\n  return { type: \"DOWNLOAD_PORTFOLIO\" };\r\n}\r\n\r\nexport function setIexApiKey(iexApiKey: string): SetIexApiKeyAction {\r\n  return { iexApiKey, type: \"SET_IEX_API_KEY\" };\r\n}\r\n\r\n// A timeout to periodically fetch new quotes.\r\nlet fetchAllQuotesTimeout: ?TimeoutID;\r\n\r\nfunction clearFetchQuotesTimeout() {\r\n  if (fetchAllQuotesTimeout != null) {\r\n    clearTimeout(fetchAllQuotesTimeout);\r\n    fetchAllQuotesTimeout = null;\r\n  }\r\n}\r\n\r\n// Example data:\r\n//\r\n// {\r\n//   date: '2018-04-09',\r\n//   open: 169.88,\r\n//   high: 173.09,\r\n//   low: 169.845,\r\n//   close: 170.05,\r\n//   volume: 29017718,\r\n//   unadjustedVolume: 29017718,\r\n//   change: 1.67,\r\n//   changePercent: 0.992,\r\n//   vwap: 171.555,\r\n//   label: 'Apr 9',\r\n//   changeOverTime: 0,\r\n// }\r\nexport function fetchSymbolData(symbol: string): ThunkAction {\r\n  return function (dispatch: Dispatch, getState: GetState) {\r\n    dispatch({ type: \"FETCH_SYMBOL_DATA_REQUEST\" });\r\n    fetch(\r\n      `${IEX_ROOT}/tickers/${symbol}/eod?access_key=${getState().iexApiKey}`\r\n    )\r\n      .then((response) => {\r\n        response\r\n          .json()\r\n          .then((symbolData) => {\r\n            dispatch({ symbol, symbolData, type: \"FETCH_SYMBOL_DATA_SUCCESS\" });\r\n          })\r\n          .catch((error) => {\r\n            dispatch({ error, type: \"FETCH_SYMBOL_DATA_FAILURE\" });\r\n          });\r\n      })\r\n      .catch((error) => {\r\n        dispatch({ error, type: \"FETCH_SYMBOL_DATA_FAILURE\" });\r\n      });\r\n  };\r\n}\r\n\r\nexport function fetchAllQuotes(): ThunkAction {\r\n  return function (dispatch: Dispatch, getState: GetState) {\r\n    function setFetchQuotesTimeout() {\r\n      // Because more `fetchQuote` actions might be in flight, ensure the timer is empty and\r\n      // synchronously create the next one (even though it was cleared once when this action was\r\n      // first dispatched). This ensures no more than one timeout at a time is pending.\r\n      clearFetchQuotesTimeout();\r\n      setTimeout(() => {\r\n        dispatch(fetchAllQuotes());\r\n      }, 300000); // Fetch quotes minimally every 5 minutes. (5 * 60 * 1000)\r\n    }\r\n    // alert(typeof(getState().symbols.join(\",\").split(\",\")));\r\n    // alert(getState().symbols[0]);\r\n    const { symbols } = getState();\r\n    if (symbols.length === 0) {\r\n      // No need to do anything if there are no symbols to fetch. Restart the timer and bomb out\r\n      // early.\r\n      clearFetchQuotesTimeout();\r\n      setFetchQuotesTimeout();\r\n      return;\r\n    }\r\n    \r\n    clearFetchQuotesTimeout();\r\n    dispatch({ type: \"FETCH_QUOTES_REQUEST\" });\r\n    alert('te');\r\n    fetch(\r\n      `${IEX_ROOT}/eod?access_key=${\r\n        getState().iexApiKey\r\n      }&symbols=${getState().symbols.join(\",\")}`\r\n    )\r\n      .then((response) => {\r\n        alert('gg1');\r\n        response\r\n          .json()\r\n          .then((data) => {\r\n            // Data comes back under the endpoint from which it was requested. In this case the key\r\n            // is `quote`. Unzip the response to match the shape of the store.\r\n            //\r\n            // See: https://iextrading.com/developer/docs/#batch-requests\r\n            const nextQuotes = {};\r\n            // var i = 0;\r\n            // alert(symbol)\r\n            alert('test1');\r\n            getState().symbol.forEach((symbol) => {\r\n              alert('test');\r\n              // nextQuotes[symbol] = data[symbol].quote;\r\n            });\r\n\r\n            // for (var i=0; i<symbols.length; i++){\r\n            //   // nextQuotes[data['data'][i].symbol] = data['data'][i];\r\n            //   nextQuotes[\"TSLA\"] = {\"open\":20,\"high\":11,\"close\":113,\"volume\":12,\"symbol\":\"TSLA\"};\r\n            //   nextQuotes[\"VTI\"] = {\"open\":20,\"high\":11,\"close\":113,\"volume\":12,\"symbol\":\"VTI\"};\r\n            // }\r\n\r\n            dispatch({ quotes: nextQuotes, type: \"FETCH_QUOTES_SUCCESS\" });\r\n          })\r\n          .catch((error) => {\r\n            dispatch({ error, type: \"FETCH_QUOTES_FAILURE\" });\r\n          });\r\n      })\r\n      .catch((error) => {\r\n        dispatch({ error, type: \"FETCH_QUOTES_FAILURE\" });\r\n      })\r\n      .finally(() => {\r\n        setFetchQuotesTimeout();\r\n      });\r\n  };\r\n}\r\n\r\nexport function fetchAllIexSymbols(): ThunkAction {\r\n  return function (dispatch: Dispatch, getState: GetState) {\r\n    dispatch({ type: \"FETCH_ALL_IEX_SYMBOLS_REQUEST\" });\r\n    fetch(`${IEX_ROOT}/tickers?access_key=${getState().iexApiKey}`)\r\n      .then((response) => {\r\n        response\r\n          .json()\r\n          .then((data) => {\r\n            dispatch({ allIexSymbols: data, type: \"FETCH_ALL_IEX_SYMBOLS_SUCCESS\" });\r\n          })\r\n          .catch((error) => {\r\n            dispatch({ error, type: \"FETCH_ALL_IEX_SYMBOLS_FAILURE\" });\r\n          });\r\n      })\r\n      .catch((error) => {\r\n        dispatch({ error, type: \"FETCH_ALL_IEX_SYMBOLS_FAILURE\" });\r\n      });\r\n  };\r\n}\r\n\r\nexport function importTransactionsFile(file: Blob): ThunkAction {\r\n  return function (dispatch: Dispatch) {\r\n    dispatch({ type: \"IMPORT_TRANSACTIONS_FILE_REQUEST\" });\r\n    const fileReader = new FileReader();\r\n    fileReader.onerror = () => {\r\n      dispatch({ type: \"IMPORT_TRANSACTIONS_FILE_FAILURE\" });\r\n    };\r\n    fileReader.onload = () => {\r\n      const parsedCsv = csvParse(fileReader.result, { columns: true });\r\n      dispatch(addTransactions(transformGfToStocks(parsedCsv)));\r\n      dispatch(fetchAllQuotes());\r\n      dispatch({ type: \"IMPORT_TRANSACTIONS_FILE_SUCCESS\" });\r\n    };\r\n    fileReader.readAsText(file);\r\n  };\r\n}\r\n","/* @flow */\r\n\r\nimport type { Quote, Transaction } from \"./types\";\r\n\r\ntype GfTransaction = {\r\n  \"Cash value\": string,\r\n  Commission: string,\r\n  Date: string,\r\n  Name: string,\r\n  Notes: string,\r\n  Price: string,\r\n  Shares: string,\r\n  Symbol: string,\r\n  Type: \"Buy\" | \"Sell\",\r\n};\r\n\r\nexport function transformGfToStocks(gfTransactions: Array<GfTransaction>): Array<Transaction> {\r\n  return gfTransactions.map((transaction) => ({\r\n    cashValue: transaction[\"Cash value\"] === \"\" ? null : parseFloat(transaction[\"Cash value\"]),\r\n    commission: parseFloat(transaction.Commission),\r\n    date: transaction.Date,\r\n    id: -1, // A real ID is added in the reducer.\r\n    notes: transaction.Notes,\r\n    price: parseFloat(transaction.Price),\r\n    shares: parseFloat(transaction.Shares),\r\n    symbol: transaction.Symbol,\r\n    type: transaction.Type,\r\n  }));\r\n}\r\n\r\nexport function transformStocksToGf(\r\n  stocksTransactions: Array<Transaction>,\r\n  quotes: { [symbol: string]: Quote }\r\n): Array<GfTransaction> {\r\n  return stocksTransactions.map((transaction) => ({\r\n    \"Cash value\": transaction.cashValue == null ? \"\" : `${transaction.cashValue}`,\r\n    Commission: `${transaction.commission}`,\r\n    Date: transaction.date == null ? \"\" : transaction.date,\r\n    Name: quotes[transaction.symbol] == null ? \"\" : quotes[transaction.symbol].companyName,\r\n    Notes: transaction.notes == null ? \"\" : transaction.notes,\r\n    Price: `${transaction.price}`,\r\n    Shares: `${transaction.shares}`,\r\n    Symbol: transaction.symbol,\r\n    Type: transaction.type,\r\n  }));\r\n}\r\n"],"sourceRoot":""}